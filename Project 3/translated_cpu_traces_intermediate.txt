cpu_traces intermediate

*******************************************
* need to replace labels in branch instr  *
* with the PC addr. of the relevant label *
*******************************************

PC = 0:   add x5, x0, x0 
PC = 4:   addi x7, x0, 4 

PC = 8:   (outerloop:) beq x5, x7, 116 (EXIT) ~> 108 relative addr.

PC = 12:  slli x28, x5, 3
PC = 16:  add x28, x28, x11 ~> ??? this is assigning out[i]=i ???

// initialize iterable for inner for loop
PC = 20:  add x30, x0, x0
PC = 24:  add x6, x0, x0 

PC = 28:  (innerloop:) beq x6, x7, 96 (post_process) ~> 68 relative addr.

PC = 32:  addi x2, x2, -16
PC = 36:  sw x10, 0(x2)
PC = 40:  sw x11, 8(x2)

PC = 44:  slli x29, x5, 2 
PC = 48:  add x29, x29, x6 
PC = 52:  slli x29, x29, 3 
PC = 56:  add x29, x10, x29 
PC = 60:  lw x10, 0(x29)
PC = 64:  add x11, x5, x0

PC = 68:  jal x1, 108 (shift) ~> 40 relative addr.
PC = 72:  add x30, x30, x10

PC = 76:  lw x10, 0(x2)
PC = 80:  lw x11, 8(x2)
PC = 84:  addi x2, x2, 16
PC = 88:  addi x6, x6, 1
PC = 92:  beq x0, x0, 28 (innerloop) ~> -64 relative addr.

PC = 96:  (post_process:) sw x30, 0(28)
PC = 100: addi x5, x5, 1
PC = 104: beq x0, x0, 8 (outerloop) ~> -96 relative addr.

PC = 108: (shift:) sll x10, x10, x11
PC = 112: jalr x0, 0(x1) ~> does this need a relative addr.?

PC = 116: Exit:

---------------------------
jal to jalr & back
---------------------------
68 + 40 = 108
112 - 40 = 72
---------------------------
PC = 68:  jal x1, (40)108 (shift) ~> needs to be updated to a relative addr. ~> 40
PC = 72:  add x30, x30, x10
:
:
PC = 108: (shift:) sll x10, x10, x11
PC = 112: jalr x0, 0(x1) ~> does this need a relative addr.?
---------------------------
1. jal stores the relative PC addr. in x1 then sends that through the PC to 
   jump to that relative addr. ~> PC + rel.addr.
2. when funct. returns jalr sends the same relative addr. that was used to call it
   to the PC mux which when subtracted from the current addr. brings it back to the
   instr. directly following the funct. call

